Lexical Grammar 
 
 <constant> -> <integer constant> | <boolean constant>

 <constant identifier> -> <identifier>

 <identifier> -> <letter> { <letter or digit> }

 <letter or digit> -> <letter> | <digit>

 <integer constant> -> <digit> { <digit> }

 <boolean constant> -> true | false

 <letter> -> a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z

 <digit> -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

 <special keyword> -> ( | ) | . | , | ; | : | .. | not | if | then | else | of | while | do | begin | end | read | write | var | array | procedure | program

 <assignment operator> -> :=

 <relational operator> -> = | <> | < | <= | >= | >

 <adding operator> -> + | - | or

 <multiplying operator> -> * | div | and

 <predefined identifier> -> integer | boolean | true | false